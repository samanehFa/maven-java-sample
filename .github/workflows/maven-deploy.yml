# GitHub Actions workflow for CI/CD with Maven, SonarQube, and AWS EC2 deployment

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

  #   - name: Copy artifact to staging directory
  #     run: mkdir staging && cp target/*.jar staging

  #   - name: SonarQube Scan
  #     uses: sonarsource/sonarqube-scan-action@v2.2.0
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  #   - name: Publish Artifacts    
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: Package
  #       path: staging

  #   - name: Update dependency graph
  #     uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Download Artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: Package
  #       path: staging

  #   - name: Set up SSH Key
  #     run: |
  #       echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private_key.pem
  #       chmod 600 private_key.pem

  #   - name: Deploy JAR to EC2
  #     run: |
  #       scp -o StrictHostKeyChecking=no -i private_key.pem staging/*.jar ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app.jar

  #   - name: Restart Application on EC2
  #     run: |
  #       ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} << EOF
  #         pkill -f 'java -jar' || true
  #         nohup java -jar /home/ubuntu/app.jar > app.log 2>&1 &
  #       EOF
